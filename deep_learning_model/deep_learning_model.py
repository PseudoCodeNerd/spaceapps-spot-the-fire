# -*- coding: utf-8 -*-
"""Deep Learning Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gEWRDQArLb9wpiuLlSEjx80gFchgIshD
"""

import pickle
import skimage.measure
from sklearn.linear_model import LinearRegression, Lasso
from sklearn.neural_network import MLPClassifier
from sklearn.multioutput import MultiOutputRegressor
import numpy as np

def create_array(file):
  with open('/content/drive/My Drive/NASA SpaceApps/data/'+ file + '.pkl', 'rb') as f:
      fire1 = np.array(pickle.load(f))
  fire1 = np.nan_to_num(fire1)
  fire1 = fire1[::2,:,:]
  C, M, N = fire1.shape
  K = 4
  L = 4

  MK = M // K
  NL = N // L
  pp = fire1[:, :MK*K, :NL*L].reshape(C, MK, K, NL, L).max(axis=(2, 4))

  return pp

fire1 = create_array('fire0')
fire2 = create_array('fire1')
fire3 = create_array('fire2')
fire4 = create_array('fire3')

final = np.concatenate((fire1, fire2, fire3, fire4), axis=0)
C, M, N = final.shape

dataset = final.reshape(C, M, N, 1)
print (dataset.shape)

X = dataset[:-1]
Y = dataset[1:]

from keras.models import Sequential
from keras.layers import Conv2D
import keras.backend as kb
from keras.optimizers import Adamax

def custom_loss(y_real, y_pred):
  return kb.mean(kb.square(y_real - y_pred))

model = Sequential()
model.add(Conv2D(12, kernel_size=6, padding='same', activation='relu', input_shape=(M, N, 1)))
model.add(Conv2D(1, kernel_size=6, padding='same', activation='relu', input_shape=(M, N, 12)))
model.compile(optimizer=Adamax(learning_rate=0.005), loss=custom_loss)

model.fit(X, Y, epochs=1000)

np.mean(np.square(X - Y))

np.mean(np.square(X))

X[-1].shape

start = X[-1].reshape((1, 180, 360, 1))
forecast = []
for i in range(20):
  y = model.predict(start)
  y = y / y.max()
  print (start.shape, y.shape, y.max(), start.max())
  forecast.append(y)
  start = y

with open("/content/drive/My Drive/NASA SpaceApps/data/forecastsNew.pkl", 'wb') as f:
    pickle.dump(forecast, f)

forecast = np.array(forecast)
forecast.shape

print(forecast.max())

